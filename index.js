const { Telegraf } = require("telegraf");
require("dotenv").config();
const bot = new Telegraf(process.env.TG_TOKEN);
const http = require("http");
const fs = require("fs");
var mysql = require("mysql");
var schedule = require("node-schedule");
var request = require("request");
const { triggerAsyncId } = require("async_hooks");
const { consumers } = require("stream");


const db = mysql.createPool({
  connectionLimit: 5,
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  database: process.env.DB_NAME,
  password: process.env.DB_PASSWORD,
});

var cfg = JSON.parse(fs.readFileSync("./config/main.json", "utf8"));
var text = JSON.parse(fs.readFileSync("./config/text.json", "utf8"));

function logger(type, text, err) {
  var moment = require("moment-timezone");

  var log_text = `[${moment()
    .tz("Europe/Kiev")
    .format("YYYY-MM-DD HH:mm:ss")}] [${type}] - ${text}`;
  var logtofile = fs.createWriteStream("log/last.txt", {
    flags: "a",
  });

  if (err == undefined) {
    err = "";
  }
  console.log(log_text + "  " + err);

  logtofile.write(log_text + "\r\n");
  bot.telegram.sendMessage(cfg.log_channel, log_text);
}

var markdown = {
  "parse_mode": "markdown"
};


bot.start((ctx) => {
  db.query(
    `INSERT users (chat_id) values (${ctx.message.chat.id})`,
    function (err) {
      if (err) {
        logger(
          "DB Error",
          `–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${ctx.message.chat.id} –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö!`,
          err
        );
        if (err.code == "ER_DUP_ENTRY") {
          logger(
            "User",
            `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${ctx.message.chat.id} –≤–∂–µ —î —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö`
          );
          ctx.reply(text.user_already_exist);
        }
      } else {
        logger(
          "DB",
          `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${ctx.message.chat.id} –¥–æ–¥–∞–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö!`
        );
        ctx.telegram.sendMessage(ctx.chat.id, text.start,{
          "parse_mode": "markdown",
          reply_markup: {
            parse_mode: "markdown",
            keyboard: [
              [
                { text: "üë®‚Äçüéì –í–∏–±—ñ—Ä –≥—Ä—É–ø–∏" },
                { text: "üìÖ –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥-—Ç–∞–±–ª–∏—Ü—é" },
              ],
            ],
            resize_keyboard: true,
            one_time_keyboard: true,
          },
        });
      }
    }
  );
});

function IfAdminPermision(id) {
  var admin_id = cfg.adminchat_id;
  return new Promise((resolve, reject) => {
    for (let index = 0; index < admin_id.length; index++) {
      console.log(admin_id)
      if (id == admin_id[index]) {
        resolve();
      }
      if (index + 1 == admin_id.length) {
        reject();
      }
    }
  });
}

bot.command("stop", (ctx) => {
  db.query(
    `DELETE FROM users WHERE chat_id =${ctx.message.chat.id}`,
    function (err) {
      if (err) {
        logger(
          "DB Error",
          `–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${ctx.message.chat.id} –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö!`,
          err
        );
      } else {
        logger(
          "DB",
          `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${ctx.message.chat.id} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö!`
        );
        ctx.reply("üëå");
      }
    }
  );
});

bot.command("getid", (ctx) => {
  ctx.reply(ctx.message.chat.id);
});

bot.command("help", (ctx) => {
  ctx.reply("–î–ª—è –ø–∏—Ç–∞–Ω—å —ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π @berezovsky23");
});

bot.command("version", (ctx) => {
  ctx.reply("Vesion: " + cfg.version);
});

bot.command("getlog", (ctx) => {
  if(ctx.message.chat.id == "460266962"){
  bot.telegram.sendDocument(
      ctx.message.chat.id,
      { source: "./log/last.txt" },
      {disable_notification: true,
       caption: "Last log" }
    ).catch(err =>{
      if(err.message == '400: Bad Request: file must be non-empty'){
          ctx.reply("Log file is empty!"); 
      }
    })
  }
});

bot.command("zm", ctx =>{
  ctx.replyWithDocument(            
    { source: cfg.pdfpatch },
    { disable_notification: true, caption: "" })
})

bot.command("stats", (ctx) => {
  db.query("SELECT chat_id FROM users", function (err, result) {
    var user = result;
    db.query("SELECT value FROM properties WHERE id=4", function (err, result) {
      ctx.reply(
        "–ü—Ä–∞—Ü—é—î –±–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–æ - " +
          result[0].value +
          "  üìà" +
          "\n" +
          "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø—ñ–¥–ø–∏—Å–∞–Ω–æ - " +
          user.length +
          " üë®‚Äçüéì"
      );
    });
  });
});

bot.command("updatemsg", (ctx) => {

  if(ctx.message.chat.id == "460266962"){
      db.query("SELECT chat_id FROM users", function (err, result) {
        for(var i = 0; i<result.length; i++){
          bot.telegram.sendMessage(result[i].chat_id, 
            " * –ù–æ–≤–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è ‚ú® * \n\n –î–æ–¥–∞–Ω–æ: \n - –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è–º–∏. \n /menu ‚ûæ ‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ‚ûæ üîî –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è \n\n - –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü—ñ—è —Ä–æ–∑–∫–ª–∞–¥—É (–≤–∏–±—ñ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –≥—Ä—É–ø–∏ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É, –∞–±–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥-—Ç–∞–±–ª–∏—Ü—ñ(—è–∫ –Ω–∞ —Å–∞–π—Ç—ñ)) \n /menu ‚ûæ ‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ‚ûæ üìÖ –†–æ–∑–∫–ª–∞–¥ \n\n _*–ø—Ä–∏ –∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—ñ –Ω–µ–¥–æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è, –±–∞–≥—ñ–≤, –æ–¥—Ä—É–∫—ñ–≤–æ–∫ –±—É–¥—å –ª–∞—Å–∫–∞ —Å–ø–æ–≤—ñ—Å—Ç—ñ—Ç—å –≤ /report _",
            markdown
            );

        }
      });
    }
});

bot.command("report", (ctx) => {
  ctx.reply("–î–ª—è –∑–≤'—è–∑–∫—É –∑ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–æ–º -  @berezovsky23");
});

function GetNewFileSize() {
  request(
    {
      url: cfg.url,
      method: "HEAD",
    },
    function (err, response, body) {
      if (err) {
        logger("Request ERROR", `–ù–µ–º–æ–∂–ª–∏–≤–æ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É!`, err);
      } else {
        var file_size = response.headers["content-length"];
        if (!isNaN(file_size)) {
          CompareFileSize(file_size);
        }
      }
    }
  );
}

function CompareFileSize(NewSize) {
  db.query(
    `SELECT value FROM properties WHERE type='OldFileSize' `,
    function (err, rows) {
      if (err) {
        logger(
          "DB Error",
          `–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–∞–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É —Ñ–∞–π–ª–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö!`,
          err
        );
      } else {
        var oldSize = rows[0].value;
        console.log("New size = " + NewSize + " Old Size = " + oldSize);
        if (NewSize != oldSize) {
          download_file(NewSize);
        }
      }
    }
  );
}

function download_file(file_size) {
  var progress = require("request-progress");
  progress(request(cfg.url), {})
    .on("error", function (err) {
      logger("Download ERROR", `–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É`, err);
    })
    .on("end", function () {
      logger("Download", `–§–∞–π–ª –∑–∞–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ`);
      ReplaceFileSize(file_size);
    })
    .pipe(fs.createWriteStream(cfg.pdfpatch));
}

function ReplaceFileSize(size) {
  db.query(
    `UPDATE properties SET value = ${size} WHERE type='OldFileSize'`,
    function (err) {
      if (err) {
        logger("DB Error", `–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É —Ñ–∞–π–ª—É!`, err);
      } else {
        GetTimetableDay();
        //do someting
      }
    }
  );
}

function GetTimetableDay() {
  const pdf = require("pdf-parse");

  var days = ["–ø–æ–Ω–µ–¥—ñ–ª–æ–∫", "–≤—ñ–≤—Ç–æ—Ä–æ–∫", "—Å–µ—Ä–µ–¥—É", "—á–µ—Ç–≤–µ—Ä", "–ø'—è—Ç–Ω–∏—Ü—é", "—Å—É–±–æ—Ç—É"];
  var day;
  let dataBuffer = fs.readFileSync(cfg.pdfpatch);

  pdf(dataBuffer).then(function (data) {
    for (let index = 0; index < days.length; index++) {
      if (data.text.indexOf(days[index]) != -1) {
        day = days[index];
        break;
      }
    }
    if (day != undefined) {
      db.query(
        `UPDATE properties SET value="${day}" WHERE type='last_day'`,
        function (err) {
          if (err) {
            logger("DB Error", `–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–Ω—è —Ç–∏–∂–Ω—è!`, err);
          }
          var content = {
            course: "table",
          };
          sendTimetable(content, day);
          parcePDF(day)
        }
      );
    }else{
      sendTimetable({course: "table"}, "");
          parcePDF("")
    }
  });
}

function parcePDF(day) {
  var pdf_table_extractor = require("pdf-table-extractor");

  function success(result) {
    var table = result.pageTables[0].tables;

    var value = [];

    for (var i = 0; i < table.length; i++) {
      var course = table[i][0].replace(/\s+/g, "").trim();
      var lesson1 = table[i][1].replace(/\s+/g, " ").trim();
      var classroom1 = table[i][2].replace(/\s+/g, " ").trim();
      var lesson2 = table[i][3].replace(/\s+/g, " ").trim();
      var classroom2 = table[i][4].replace(/\s+/g, " ").trim();
      var lesson3 = table[i][5].replace(/\s+/g, " ").trim();
      var classroom3 = table[i][6].replace(/\s+/g, " ").trim();
      var lesson4 = table[i][7].replace(/\s+/g, " ").trim();
      var classroom4 = table[i][8].replace(/\s+/g, " ").trim();
      var lesson5 = table[i][9];
      var classroom5 = table[i][10];

      for (var k = 1; k < classroom1.length; k++) {
        var letter = classroom1.slice(k, k + 1);
        if (isNaN(letter)) {
          if (letter === letter.toUpperCase()) {
            if (classroom1.slice(k - 1, k) == " ") {
              lesson2 = classroom1.slice(k, classroom1.length);
              classroom1 = classroom1.slice(0, k);
            }
          }
        }
      }

      for (var k = 1; k < classroom2.length; k++) {
        var letter = classroom2.slice(k, k + 1);
        if (isNaN(letter)) {
          if (letter === letter.toUpperCase()) {
            if (classroom2.slice(k - 1, k) == " ") {
              lesson3 = classroom2.slice(k, classroom2.length);
              classroom2 = classroom2.slice(0, k);
            }
          }
        }
      }

      for (var k = 1; k < classroom3.length; k++) {
        var letter = classroom3.slice(k, k + 1);
        if (isNaN(letter)) {
          if (letter === letter.toUpperCase()) {
            if (classroom3.slice(k - 1, k) == " ") {
              lesson4 = classroom3.slice(k, classroom3.length);
              classroom3 = classroom3.slice(0, k);
            }
          }
        }
      }
      value.push([
        course,
        lesson1,
        classroom1,
        lesson2,
        classroom2,
        lesson3,
        classroom3,
        lesson4,
        classroom4,
        lesson5,
        classroom5,
      ]);
    }
    for (let index = 0; index < value.length; index++) {
      if (value[index][0] === "") {
        value.splice(index, 1);
      }
    }
    for (let index = 0; index < value.length; index++) {
      if (value[index][0] === "–ì—Ä—É–ø–∞") {
        value.splice(index, 1);
      }
    }

    db.query("TRUNCATE table timetable", function (err) {
      if (err) {
        logger("DB Error", `–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ timetable`, err);
      }
    });

    const db_request =
      "INSERT timetable (course, lesson1, classroom1, lesson2 ,classroom2, lesson3,classroom3, lesson4,classroom4, lesson5, classroom5) VALUES ?";
    db.query(db_request, [value], function (err) {
      if (err) {
        logger("DB Error", `–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ timetable`, err);
      } else {
        setTimeout(() => {
          SeparateTable(day)
        }, 2500);
        
      }
    });
  }

  function error(err) {
    logger("Parce ERROR", `–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É pdf —Ñ–∞–π–ª—É`, err);
  }

  pdf_table_extractor(cfg.pdfpatch, success, error);
}

function SeparateTable(current_day) {
  db.query(`SELECT * FROM timetable_old`, function (err, rowsold) {
    if (err) {
      logger("DB Error", `–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö!`, err);
    } else {
      for (let index = 0; index < rowsold.length; index++) {
        db.query(
          `SELECT * FROM timetable WHERE course='${rowsold[index].course}'`,
          function (err, rows) {
            if (err) {
              logger("DB Error", `–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö!`, err);
            } else {
              if (
                rowsold[index].lesson1 != rows[0].lesson1 ||
                rowsold[index].lesson2 != rows[0].lesson2 ||
                rowsold[index].lesson3 != rows[0].lesson3 ||
                rowsold[index].lesson4 != rows[0].lesson4 ||
                rowsold[index].lesson5 != rows[0].lesson5 ||
                rowsold[index].classroom1 != rows[0].classroom1 ||
                rowsold[index].classroom2 != rows[0].classroom2 ||
                rowsold[index].classroom3 != rows[0].classroom3 ||
                rowsold[index].classroom4 != rows[0].classroom4 ||
                rowsold[index].classroom5 != rows[0].classroom5
              ) {
                setTimeout(() => {
                  sendTimetable(rows[0], current_day);
                }, 2500);
              }
            }
          }
        );
      }
    }
  });
  setTimeout(() => {
    clone_table(current_day);
  }, 25000);
}

function sendTimetable(content, current_day) {
  db.query(
    `SELECT * FROM users WHERE group_type='${content.course}'`,
    function (err, users) {
      if (err) {
        logger(
          "DB Error",
          `–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –≥—Ä—É–ø–∏ ${content.course} –¥–∞–Ω–∏—Ö –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö!`,
          err
        );
      }
      if (users.length == 0) {
      } else {
        var pass = true;
        for (let i = 0; i < users.length; i++) {

        db.query(
          `SELECT * FROM properties where type='last_days'`,
          function (err, properties) {
            if (err) {
              logger("DB Error", `change`, err);
            } else {
              var disable_notification = true;

              if (current_day != properties[0].value) {
                text = "–ù–æ–≤–∏–π —Ä–æ–∑–∫–ª–∞–¥üìö";
                if (users[i].notification_n) {
                  disable_notification = false;
                }
              } else {
                text = "–ó–º—ñ–Ω–∏ –≤ —Ä–æ–∑–∫–ª–∞–¥—ñüìö";
                if (users[i].notification_z) {
                  disable_notification = false;
                }
              }
              if(content.course != 'table'){
              text = `${text}\n–î–ª—è –≥—Ä—É–ø–∏ ${content.course} –Ω–∞ ${current_day} \n\n${content.lesson1} [ ${content.classroom1} ]\n${content.lesson2} [ ${content.classroom2} ]\n${content.lesson3} [ ${content.classroom3} ]\n${content.lesson4} [ ${content.classroom4} ]`;
              }else{
                text = `${text} –Ω–∞ ${current_day}`
              }
              bot.telegram.sendDocument(
                users[i].chat_id,
                { source: cfg.pdfpatch },
                { disable_notification: disable_notification, caption: text }
              );
              logger("Send table", `–ù–∞–¥—ñ—Å–ª–∞–Ω–æ" ${users[i].chat_id}  disable_notification - ${disable_notification}`, err);
              if(pass){
                debug_send_text(text);
                pass = false;
              }
            }
          }
        );
        }
      }
    }
  );
}

function debug_send_text(text){
  bot.telegram.sendDocument(
    cfg.log_channel,
    { source: cfg.pdfpatch },
    { disable_notification: true, caption: text }
  );
}

function clone_table(current_day){
  db.query(`update properties set value = "${current_day}" where type='last_days'`, function (err) {
    if (err) {
      logger("DB Error", `–ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –¥–Ω—è —Ç–∏–∂–Ω—è —É –ë–î`, err);
    }
  });
  db.query("TRUNCATE table timetable_old", function (err) {
    if (err) {
      logger("DB Error", `–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ timetable_old`, err);
    }
  });
  db.query("INSERT INTO timetable_old SELECT * FROM timetable", function (err) {
    if (err) {
      logger("DB Error", `–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ timetable`, err);
    }else{
      logger("DB", `–¢–∞–±–ª–∏—Ü—é timetable –∫–ª–æ–Ω–æ–≤–∞–Ω–æ`, err);
    }
  });
}

bot
  .command("menu", (ctx) => {
    ctx.telegram.sendMessage(ctx.chat.id, "–ú–µ–Ω—é üìã", {
      reply_markup: {
        keyboard: [[{ text: "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" }, { text: "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è" }]],
        resize_keyboard: true,
      },
    });
  })
  .hears("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", (ctx) => {
    ctx.telegram.sendMessage(ctx.chat.id, "üîß –í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é", {
      reply_markup: {
        keyboard: [[{ text: "üìÖ –†–æ–∑–∫–ª–∞–¥" }, { text: "üîî –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è" }]],
        resize_keyboard: true,
      },
    });
  })
  .hears("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", (ctx) => {
    db.query("SELECT chat_id FROM users", function (err, result) {
      var user = result;
      db.query("SELECT value FROM properties WHERE id=4", function (err, result) {
        ctx.reply(
          "–ü—Ä–∞—Ü—é—î –±–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–æ - " +
            result[0].value +
            "  üìà" +
            "\n" +
            "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø—ñ–¥–ø–∏—Å–∞–Ω–æ - " +
            user.length +
            " üë®‚Äçüéì",{
              reply_markup: { remove_keyboard: true },
            }
        );
      });
    });
  })
  .hears("üìÖ –†–æ–∑–∫–ª–∞–¥", (ctx) => {
    ctx.telegram.sendMessage(ctx.chat.id, "üîß –í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é", {
      reply_markup: {
        keyboard: [
          [
            { text: "üë®‚Äçüéì –í–∏–±—ñ—Ä –≥—Ä—É–ø–∏" },
            { text: "üìÖ –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥-—Ç–∞–±–ª–∏—Ü—é" },
          ],
        ],
        resize_keyboard: true,
      },
    });
  })
  .hears("üìÖ –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥-—Ç–∞–±–ª–∏—Ü—é", (ctx) => {
    db.query(
      `UPDATE users SET group_type='table' WHERE chat_id=${ctx.chat.id}`,
      function (err) {
        if (err) {
          ctx.telegram.sendMessage(ctx.chat.id, "–£–ø—Å.. –°—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞ üò∞");
          logger(
            "DB Error",
            `–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≥—Ä—É–ø–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${ctx.chat.id}`,
            err
          );
        } else {
          logger("Group", `–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ä–æ–∑–∫–ª–∞–¥-—Ç–∞–±–ª–∏—Ü—é –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${ctx.chat.id}`, err);
          ctx.telegram.sendMessage(ctx.chat.id, text.table_timetable_confirm, {
            reply_markup: { remove_keyboard: true },
          });
        }
      }
    );
  })
  .hears("üë®‚Äçüéì –í–∏–±—ñ—Ä –≥—Ä—É–ø–∏", (ctx) => {
    ctx.telegram.sendMessage(ctx.chat.id, "–í–∏–±—ñ—Ä –≥—Ä—É–ø–∏", {
      parse_mode: "markdown",
      reply_markup:{
        remove_keyboard: true,
      },
    }).then(({message_id})=>{
      ctx.telegram.deleteMessage(ctx.chat.id, message_id)
    });
    select_group(ctx)
  });

function select_group(ctx){
  
  db.query(`SELECT course FROM timetable`, function (err, groups) {
    if (err) {
      logger("DB Error", `–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –ë–î`, err);
    }else{
      var keyboard = [];
      for (let index = 0; index < groups.length; index++) {
        keyboard.push([
          {
            text: groups[index].course,
            callback_data: groups[index].course,
          }
        ])
        
      }
      ctx.telegram.sendMessage(ctx.chat.id, "üë®‚Äçüéì –í–∏–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É –∑ —Å–ø–∏—Å–∫—É:", {
        parse_mode: "markdown",
        reply_markup: {
          inline_keyboard: keyboard,
        },
      });
    }
  });
  
}

bot.on('callback_query', (ctx) => {
  if(ctx.callbackQuery.data == "NN"){
    db.query(
      `SELECT notification_n, notification_z FROM users WHERE chat_id=${ctx.chat.id}`,
      function (err, setting) {
        if (err) {
          logger("DB Error", `–ø–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è notification_n, notification_z –¥–ª—è –∫—Ä–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${ctx.chat.id}`, err);
        } else {
          if (setting[0].notification_n) {
            db.query(
              `UPDATE users Set notification_n=false WHERE chat_id=${ctx.chat.id}`,
              function (err) {
                if (err) {
                  logger("DB Error", `–ø–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è notification_n=false –¥–ª—è –∫—Ä–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${ctx.chat.id}`, err);
                } else {
                  set1 = "‚ùå";
                  if (setting[0].notification_z) {
                    set2 = "‚úîÔ∏è";
                  } else {
                    set2 = "‚ùå";
                  }
                  EditInline(ctx, set1, set2);
                  logger("Notification", `C–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ä–æ–∑–∫–ª–∞–¥—É –≤–∏–º–∫–Ω—É—Ç–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${ctx.chat.id}`, err);
                }
              }
            );
          } else {
            db.query(
              `UPDATE users Set notification_n=true WHERE chat_id=${ctx.chat.id}`,
              function (err) {
                if (err) {
                  logger("DB Error", `–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è notification_n=true –¥–ª—è –∫—Ä–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${ctx.chat.id}`, err);
                } else {
                  set1 = "‚úîÔ∏è";
                  if (setting[0].notification_z) {
                    set2 = "‚úîÔ∏è";
                  } else {
                    set2 = "‚ùå";
                  }
                  EditInline(ctx, set1, set2);
                  logger("Notification", `C–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ä–æ–∑–∫–ª–∞–¥—É —É–≤—ñ–º–∫–Ω–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${ctx.chat.id}`, err);
                }
              }
            );
          }
        }
      }
    );
  }if(ctx.callbackQuery.data == "NZ"){
    db.query(
      `SELECT notification_n, notification_z FROM users WHERE chat_id=${ctx.chat.id}`,
      function (err, setting) {
        if (err) {
          logger("DB Error", `–ø–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è notification_n, notification_z –¥–ª—è –∫—Ä–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${ctx.chat.id}`, err);
        } else {
          if (setting[0].notification_z) {
            db.query(
              `UPDATE users Set notification_z=false WHERE chat_id=${ctx.chat.id}`,
              function (err) {
                if (err) {
                  logger("DB Error", `–ø–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è notification_z=false –¥–ª—è –∫—Ä–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${ctx.chat.id}`, err);
                } else {
                  set2 = "‚ùå";
                  if (setting[0].notification_n) {
                    set1 = "‚úîÔ∏è";
                  } else {
                    set1 = "‚ùå";
                  }
                  EditInline(ctx, set1, set2);
                  logger("Notification", `C–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∑–º—ñ–Ω –≤ —Ä–æ–∑–∫–ª–∞–¥—ñ –≤–∏–º–∫–Ω—É—Ç–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${ctx.chat.id}`, err);
                }
              }
            );
          } else {
            db.query(
              `UPDATE users Set notification_z=true WHERE chat_id=${ctx.chat.id}`,
              function (err) {
                if (err) {
                  logger("DB Error", `–ø–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è notification_z=false –¥–ª—è –∫—Ä–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${ctx.chat.id}`, err);
                } else {
                  set2 = "‚úîÔ∏è";
                  if (setting[0].notification_n) {
                    set1 = "‚úîÔ∏è";
                  } else {
                    set1 = "‚ùå";
                  }
                  EditInline(ctx, set1, set2);
                  logger("Notification", `C–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∑–º—ñ–Ω –≤ —Ä–æ–∑–∫–ª–∞–¥—ñ —É–≤—ñ–º–∫–Ω–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${ctx.chat.id}`, err);
                }
              }
            );
          }
        }
      }
    );
  }else{
  db.query(`SELECT course FROM timetable`, function (err, groups) {
    if (err) {
      logger("DB Error", `–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –ë–î`, err);
    } else {
      for (let index = 0; index < groups.length; index++) {
        if (ctx.callbackQuery.data == groups[index].course) {
          db.query(
            `UPDATE users SET group_type='${ctx.callbackQuery.data}' WHERE chat_id=${ctx.chat.id}`,
            function (err) {
              if (err) {
                ctx.telegram.sendMessage(
                  ctx.chat.id,
                  "–£–ø—Å.. –°—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞ üò∞"
                );
                logger(
                  "DB Error",
                  `–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≥—Ä—É–ø–∏ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${ctx.chat.id}`,
                  err
                );
              } else {
                logger(
                  "Group",
                  `–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≥—Ä—É–ø—É ${ctx.callbackQuery.data} –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${ctx.chat.id}`,
                  err
                );
                ctx.editMessageText("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä—É–ø–∏", {
                  parse_mode: "markdown",
                  reply_markup: {
                    inline_keyboard: [
                      [
                        {
                          text: "–í–∞—à—É –≥—Ä—É–ø—É –±—É–ª–æ –æ–Ω–æ–≤–ª–µ–Ω–æ ‚ôªÔ∏è",
                          callback_data: "group_updated",
                        },
                      ],
                    ],
                  },
                });
              }
            }
          );
        }
      }
    }
  });
}
});

var set1, set2;

bot.hears("üîî –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è", (ctx) => {
  db.query(
    `SELECT notification_n, notification_z FROM users WHERE chat_id=${ctx.chat.id}`,
    function (err, setting) {
      if (err) {
        logger("DB Error", `–ø–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è notification_n, notification_z –¥–ª—è –∫—Ä–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${ctx.chat.id}`, err);
      } else {
        if (setting[0].notification_n) {
          set1 = "‚úîÔ∏è";
        } else {
          set1 = "‚ùå";
        }
        if (setting[0].notification_z) {
          set2 = "‚úîÔ∏è";
        } else {
          set2 = "‚ùå";
        }
        
        ctx.telegram.sendMessage(ctx.chat.id, text.notification_setting, {
          parse_mode: "markdown",
          reply_markup:{
            remove_keyboard: true,
          },
        }).then(({message_id})=>{
          ctx.telegram.deleteMessage(ctx.chat.id, message_id)
        }).then(
          ctx.telegram.sendMessage(ctx.chat.id, text.notification_setting, {
            parse_mode: "markdown",
            reply_markup:{
              inline_keyboard: [
                [
                  {
                    text: "–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ä–æ–∑–∫–ª–∞–¥—É - " + set1,
                    callback_data: "NN",
                  },
                ],
                [
                  {
                    text: "–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∑–º—ñ–Ω —É —Ä–æ–∑–∫–ª–∞–¥—ñ - " + set2,
                    callback_data: "NZ",
                  },
                ],
              ],
            },
          })
        );
      }
    }
  );
});

bot.action("NN", (ctx) => {
  
});

function EditInline(ctx, set1, set2) {
  ctx.editMessageText(text.notification_setting, {
    parse_mode: "markdown",
    reply_markup: {
      inline_keyboard: [
        [{ text: "–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ä–æ–∑–∫–ª–∞–¥—É - " + set1, callback_data: "NN" }],
        [{ text: "–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∑–º—ñ–Ω —É —Ä–æ–∑–∫–ª–∞–¥—ñ - " + set2, callback_data: "NZ" }],
      ],
    },
  });
}

bot.action("NZ", (ctx) => {
  
});

var j = schedule.scheduleJob("9 9 9 * * *", function () {
  db.query("UPDATE properties SET value=0 WHERE id=3");
  db.query("UPDATE properties SET value = value + 1 WHERE id  = 4");
});


main()
function main(){
  GetNewFileSize();
  setTimeout(() => {
    main()
  }, 5000);
}

bot.launch();