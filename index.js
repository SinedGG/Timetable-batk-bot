require("dotenv").config();
const { Telegraf } = require("telegraf"),
  bot = new Telegraf(process.env.TG_TOKEN),
  http = require("http"),
  fs = require("fs"),
  request = require("request"),
  mysql = require("mysql2/promise"),
  cfg = require("./config.js"),
  schedule = require("node-schedule");

const delay = require("node:timers/promises").setTimeout;

const db = mysql.createPool({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  database: process.env.DB_NAME,
});

bot.start(async (ctx) => {
  var user = ctx.message.chat.id;
  try {
    await db.query(`INSERT users (chat_id) values (${user})`);
    console.log(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ - ${user} –¥–æ–¥–∞–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.`);
    ctx.reply(
      "–ß—É–¥–æ–≤–æ! –¢–µ–ø–µ—Ä –≤–∏ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–≤—ñ–∂–∏–π —Ä–æ–∑–∫–ª–∞–¥ –æ–¥—Ä–∞–∑—É –ø—ñ—Å–ª—è –π–æ–≥–æ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó‚ö°Ô∏è"
    );
  } catch (err) {
    ctx.reply("–ó–¥–∞—î—Ç—å—Å—è –≤–∏ –≤–∂–µ —î —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.");
  }
});

bot.command("stop", async (ctx) => {
  var user = ctx.message.chat.id;
  try {
    await db.query(`DELETE FROM users WHERE chat_id = ${user} `);
    console.log(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${user} –≤–∏–¥–∞–¥–µ–Ω–æ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.`);
    ctx.reply("üëå");
  } catch (err) {
    ctx.reply(`–£–ø—Å... –°—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞.`);
  }
});

bot.command("id", (ctx) => {
  ctx.reply(ctx.message.chat.id);
});

bot.command("stats", async (ctx) => {
  try {
    var [rows] = await db.query("SELECT chat_id FROM users");
    var users_count = rows.length;
    var days = Math.ceil(
      (new Date().getTime() - new Date(cfg.start_date).getTime()) /
        1000 /
        60 /
        60 /
        24
    );
    ctx.reply(
      `–ü—Ä–∞—Ü—é—î –±–µ–∑–ø–µ—Ä–µ—Ä–≤–Ω–æ - ${days}  üìà\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –ø—ñ–¥–ø–∏—Å–∞–Ω–æ - ${users_count} üë®‚Äçüéì`
    );
  } catch (err) {}
});

init();
async function init() {
  try {
    var [rows] = await db.query(
      `SELECT value FROM properties WHERE type='OldFileSize'`
    );
    main(rows[0].value);
  } catch (err) {
    console.log(`[DB Error] –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–∞–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É —Ñ–∞–π–ª–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö!`);
    setTimeout(() => {
      init();
    }, 120 * 1000);
  }
}

const get_size = require("./modules/file_size_by_url.js");
const download_file = require("./modules/download_file.js");

async function main(old_size) {
  try {
    var new_size = await get_size();
    if (new_size != old_size) {
      await download_file();
      var [users] = await db.query(`SELECT chat_id FROM users`);
      var [TimetableSendToday] = await db.query(
        `SELECT value FROM properties WHERE id=3`
      );
      var caption = "–ù–æ–≤–∏–π —Ä–æ–∑–∫–ª–∞–¥üìö";
      if (TimetableSendToday[0].value) caption = "–ó–º—ñ–Ω–∏ –≤ —Ä–æ–∑–∫–ª–∞–¥—ñüìö";
      for (let i = 0; i < users.length; i++) {
        console.log(`–°–ø—Ä–æ–±–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É –¥–ª—è - ${users[i].chat_id}`);
        bot.telegram
          .sendDocument(
            users[i].chat_id,
            {
              source: cfg.pdfpatch,
            },
            { caption: caption }
          )
          .catch((err) => {
            if (
              err.message.includes(
                "403: Forbidden: bot was blocked by the user"
              )
            ) {
              db.query(`DELETE FROM users WHERE chat_id =${users[i].chat_id}`);
              console.log(
                `[DB] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${users[i].chat_id} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —É –∑–≤'—è–∑–∫—É –∑ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è–º.`
              );
            }
            if (err.message.includes("429: Too Many Requests: retry after")) {
              console.log("Too Many Requests");
            }
          });

        await delay(100);
      }

      old_size = new_size;

      db.query(`
        UPDATE properties SET value = ${new_size} WHERE id=1`);
      db.query(`UPDATE properties SET value=1 WHERE id=3`);
    }
    setTimeout(() => {
      main(old_size);
    }, 30 * 1000);
  } catch (err) {
    console.log(err.message);
    setTimeout(() => {
      main(old_size);
    }, 60 * 1000);
  }
}

schedule.scheduleJob("9 9 9 * * *", () => {
  db.query("UPDATE properties SET value=0 WHERE id=3");
});

bot.launch();
